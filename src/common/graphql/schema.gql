# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type RoleCategory {
  id: String!
  duty: String!
  memo: String
  colorCode: String!
  company: Company!
}

type Company {
  id: String
  name: String
  logoUrl: String
  rules: String
  memberCount: Int
  membership: MEMBERSHIP_TYPE
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

enum MEMBERSHIP_TYPE {
  FREE
  BASIC
  PRO
  ENTERPRISE
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Category {
  id: String
  name: String
  memo: String
  color: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  company: Company
}

type Organization {
  id: String
  name: String
  address: String
  lat: String
  lng: String
  description: String
  color: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  company: Company
}

type Member {
  id: String!
  name: String!
  phone: String!
  isAdmin: Boolean
  joinDate: String!
  exitDate: String
  invitationCode: String!
  memo: String
  leave: Int
  company: Company!
  category: Category!
  organization: Organization!
}

type VacationCategory {
  id: String!
  vacationCategoryGroup: String!
  name: String!
  timeOption: String!
  memo: String
  paidTime: Int!
  deductionDays: Float!
}

type Vacation {
  id: String!
  vacationEnd: DateTime!
  vacationStart: DateTime!
  description: String!
  member: Member!
  company: Company!
  vacationCategory: VacationCategory!
}

type Account {
  id: String!
  email: String!
}

type Schedule {
  id: String!
  startWorkTime: String!
  finishWorkTime: String!
  member: Member!
  organization: Organization!
  category: Category!
}

type WorkCheck {
  id: String!
  workDay: DateTime!
  workingTime: DateTime
  quittingTime: DateTime
  breakStartTime: DateTime
  breakEndTime: DateTime
  workCheckMemo: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  member: Member!
  company: Company!
  organization: Organization!
  schedule: Schedule!
  category: Category!
}

type Query {
  """해당 회사에 속하는 member들의 출퇴근 기록 조회"""
  fetchCompanyWorkChecks(companyId: String!): [WorkCheck!]!

  """member개인의 출퇴근 기록 조회"""
  fetchMemberWorkChecks(memberId: String!): [WorkCheck!]!

  """회사 지점에 속한 멤버들의 출퇴근 기록을 월별로 조회"""
  fetchMonthWorkChecks(comapnyId: String!, month: String!): [[WorkCheck!]!]!

  """지정된 기간동안의 회사+지점에 속한 멤버들의 출퇴근 기록 조회"""
  fetchDateMemberWorkChecks(companyId: String!, organizationId: [String!]!, startDate: DateTime!, endDate: DateTime!): [WorkCheck!]!

  """회사 정보 조회"""
  fetchCompanyDetail(companyId: String!): Company! @deprecated(reason: "Initializing Status / Need Update")

  """카테고리 리스트 조회"""
  fetchCategories(companyId: String!): [Category!]!

  """카테고리 상세 조회"""
  fetchCategoryDetail(categoryId: String!): Category!

  """조직 리스트 조회"""
  fetchOrganizations(companyId: String!): [Organization!]!

  """조직 상세 조회"""
  fetchOrganizationDetail(organizationId: String!): Organization!

  """comanyId에 해당하는 멤버 전체 조회"""
  fetchMembers(companyId: String!): [Member!]!

  """memberId(사원ID)로 개별 조회"""
  fetchMember(memberId: String!): Member!

  """휴가유형 전체 찾기"""
  fetchVacationCategorys: [VacationCategory!]!

  """휴가유형ID를 적어서 하나의 유형 찾기"""
  fetchVacationCategory(vacationCategoryId: String!): VacationCategory!

  """(관리자) 휴가 전체 조회"""
  fetchVacations: [Vacation!]!

  """(관리자) 기간 내 휴가 조회"""
  fetchVacationWithDate(vacationStart: DateTime!, vacationEnd: DateTime!): [Vacation!]!

  """(관리자) 휴가 ID를 통한 휴가 조회"""
  fetchVacation(vacationId: String!): Vacation!

  """(관리자) 퇴사자와 함께 조회"""
  fetchVacationWithDelete: [Vacation!]!
  fetchAccount: Account!
  fetchMemberSchedule(memberId: String!): Schedule!

  """Fetch RoleCategory"""
  fetchRoleCategory(roleCategoryId: String!): RoleCategory!

  """Fetch RoleCategorys"""
  fetchRoleCategorys: [RoleCategory!]!
}

type Mutation {
  login(email: String!, password: String!): String!
  restoreAccessToken: String!

  """관리자용 출퇴근기록 생성하기"""
  createAdminWorkCheck(createWorkCheckInput: CreateWorkCheckInput!): WorkCheck!

  """근무노트 생성"""
  createWorkCheckMemo(workCheckId: String!, workCheckMemo: String!): WorkCheck!

  """출근기록 자동 생성"""
  createStartWorkCheck(memberId: String!): WorkCheck!

  """퇴근기록 자동 생성"""
  createEndWorkCheck(workCheckId: String!): WorkCheck!

  """휴게시작 시간 자동 생성(자동 휴게시간 설정 때는 X)"""
  createStartBreakTime(workCheckId: String!): WorkCheck!

  """휴게종료 시간 자동 생성"""
  createEndBreakTime(workCheckId: String!): WorkCheck!

  """출퇴근기록 수정"""
  updateWorkCheck(workCheckId: String!, updateWorkCheckInput: UpdateWorkCheckInput!): WorkCheck!

  """출퇴근기록 삭제"""
  deleteWorkCheck(workCheckId: String!): Boolean!

  """회사 신규 가입"""
  createCompany(createCompanyInput: CreateCompanyInput!): Company!

  """회사 정보 수정"""
  updateCompany(companyId: String!, updateCompanyInput: CreateCompanyInput!): Company!

  """회사 정보 영구 삭제 / 복구 불가능하므로 사용 주의"""
  deleteCompany(companyId: String!): Boolean!

  """카테고리 신규 생성"""
  createCategory(createCategoryInput: CreateCategoryInput!): Category!

  """카테고리 정보 수정"""
  updateCategory(categoryId: String!, updateCategoryInput: CreateCategoryInput!): Category!

  """카테고리 정보 삭제"""
  deleteCategory(categoryId: String!): Boolean!

  """조직 신규 생성"""
  createOrganization(createOrganizationInput: CreateOrganizationInput!): Organization!

  """조직 정보 수정"""
  updateOrganization(organizationId: String!, updateOrganizationInput: UpdateOrganizationInput!): Organization!

  """조직 정보 삭제"""
  deleteOrganization(organizationid: String!): Boolean!

  """멤버 정보 입력"""
  createMember(createMemberInput: CreateMemberInput!): Member!

  """멤버 정보 수정"""
  updateMember(memberId: String!, updateMemberInput: UpdateMemberInput!): Member!

  """멤버 정보 소프트 삭제"""
  softDeleteMember(memberId: String!): Boolean!

  """멤버 정보 완전 삭제"""
  deleteMember(memberId: String!): Boolean!

  """휴가유형 만들기"""
  createVacationCategory(createVacationCategoryInput: CreateVacationCategoryInput!): VacationCategory!

  """휴가유형Id와 Input을 적어 데이터 수정하기"""
  updateVacationCategory(vacationCategoryId: String!, updateVacationCategoryInput: UpdateVacationCategoryInput!): VacationCategory!

  """휴가유형ID로 데이터 완전 삭제하기"""
  deleteVacationCategory(vacationCategoryId: String!): Boolean!

  """(관리자) 휴가관리 만들기"""
  createVacation(createVacaionInput: CreateVacationInput!): [Vacation!]!

  """(관리자) 휴가 삭제 - DB에는 유지"""
  softdeleteVacation(vacationId: String!): Boolean!

  """(관리자) 휴가 완전 삭제"""
  deleteVacation(vacationId: String!): Boolean!
  createAccount(email: String!, password: String!): Account!

  """근무기록 생성"""
  createSchedule(createScheduleInput: CreateScheduleInput!): Schedule!

  """scheduleId(근무기록Id)로 근무기록 수정"""
  updateSchedule(scheduleId: String!, updateScheduleInput: UpdateScheduleInput!): Schedule!

  """근무기록 삭제"""
  deleteSchedule(scheduleId: String!): Boolean!
  createRoleCategory(createRoleCategoryInput: CreateRoleCategoryInput!): RoleCategory!

  """Update RoleCategory"""
  updateRoleCategory(roleCategoryId: String!, updateRoleCategoryInput: UpdateRoleCategoryInput!): RoleCategory!

  """Delte RoleCategory by useing roleCategoryId"""
  deleteRoleCategory(roleCategoryId: String!): Boolean!
}

input CreateWorkCheckInput {
  workDay: DateTime!
  workingTime: DateTime
  quittingTime: DateTime
  breakStartTime: DateTime
  breakEndTime: DateTime
  workCheckMemo: String
  memberId: String!
  scheduleId: String!
  organizationId: String!
  categoryId: String!
}

input UpdateWorkCheckInput {
  workDay: DateTime
  workingTime: DateTime
  quittingTime: DateTime
  breakStartTime: DateTime
  breakEndTime: DateTime
  workCheckMemo: String
  memberId: String
  scheduleId: String
  organizationId: String
  categoryId: String
}

input CreateCompanyInput {
  name: String
  logoUrl: String
  rules: String
  membership: MEMBERSHIP_TYPE
}

input CreateCategoryInput {
  name: String!
  memo: String
  color: String!
  companyId: String!
}

input CreateOrganizationInput {
  name: String!
  address: String!
  lat: String
  lng: String
  description: String
  color: String!
  companyId: String!
}

input UpdateOrganizationInput {
  name: String
  address: String
  lat: String
  lng: String
  description: String
  color: String
  companyId: String
}

input CreateMemberInput {
  name: String!
  phone: String
  isAdmin: Boolean = false
  joinDate: String!
  exitDate: String
  invitationCode: String!
  memo: String
  leave: Int
  companyId: String!
  organizationId: String
  categoryId: String
}

input UpdateMemberInput {
  name: String
  phone: String
  isAdmin: Boolean = false
  joinDate: String
  exitDate: String
  invitationCode: String
  memo: String
  leave: Int
  companyId: String
  organizationId: String
  categoryId: String
}

input CreateVacationCategoryInput {
  vacationCategoryGroup: String!
  name: String!
  timeOption: String!
  memo: String
  paidTime: Int!
  deductionDays: Int!
}

input UpdateVacationCategoryInput {
  vacationCategoryGroup: String
  name: String
  timeOption: String
  memo: String
  paidTime: Int
  deductionDays: Int
}

input CreateVacationInput {
  vacations: [DateTime!]!
  description: String!
  vacationCategoryId: String!
  memberId: String!
}

input CreateScheduleInput {
  startWorkTime: String!
  finishWorkTime: String!
}

input UpdateScheduleInput {
  startWorkTime: String
  finishWorkTime: String
}

input CreateRoleCategoryInput {
  duty: String!
  memo: String!
  colorCode: String!
  companyId: String!
}

input UpdateRoleCategoryInput {
  duty: String
  memo: String
  colorCode: String
  companyId: String
}