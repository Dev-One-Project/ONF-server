# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type GlobalConfig {
  id: String
  allowedCheckInBefore: Int
  allowedCheckInAfter: Int
  isWorkLogEnabled: Boolean
  isVacationEnabled: Boolean
  isScheduleEnabled: Boolean
  isCheckInEnabled: Boolean
  isCheckOutEnabled: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  company: Company
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Organization {
  id: String
  name: String
  address: String
  checkPoint: String
  lat: String
  lng: String
  range: Int
  description: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  company: Company
  scheduleTemplate: [ScheduleTemplate!]!
}

type ScheduleCategory {
  id: String!
  name: String!
  color: String!
  memo: String
  isOvertime: Boolean
  isNotHolidayWork: Boolean
  company: Company!
}

type ScheduleTemplate {
  id: String!
  name: String!
  startTime: String!
  endTime: String!
  colorCode: String!
  memo: String
  breakTime: String
  company: Company!
  scheduleCategory: ScheduleCategory
  organization: [Organization!]!
  roleCategory: [RoleCategory!]!
}

type RoleCategory {
  id: String!
  name: String!
  memo: String
  colorCode: String!
  company: Company!
  scheduleTemplate: [ScheduleTemplate!]!
}

type WorkInfo {
  id: String!
  name: String
  fixedLabor: String
  weekOffDays: String
  memo: String
  fixedStandard: String
  fixedHours: String
  fixedUnitPeriod: String
  fixedPeriodRange: String
  maximumStandard: String
  maximumHours: String
  maximumUnitPeriod: String
  maximumPeriodRange: String
  companyId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  member: Member
  company: Company
}

type Company {
  id: String
  name: String
  logoUrl: String
  rules: String
  memberCount: Int
  membership: MEMBERSHIP_TYPE
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  globalConfig: GlobalConfig
}

enum MEMBERSHIP_TYPE {
  FREE
  BASIC
  PRO
  ENTERPRISE
}

type Account {
  id: String!
  email: String!
  roles: String
  name: String!
  phone: String
  member: Member
  company: Company
}

type Member {
  id: String!
  name: String!
  phone: String
  joinDate: DateTime
  exitDate: DateTime
  memo: String
  isJoin: Boolean!
  leave: Float
  isAttendence: Boolean!
  company: Company!
  workInfo: WorkInfo
  organization: Organization!
  roleCategory: RoleCategory!
}

type VacationCategory {
  id: String!
  name: String!
  timeOption: String!
  memo: String
  paidTime: Int!
  deductionDays: Float!
  organization: Organization!
  roleCategory: RoleCategory!
}

type Vacation {
  id: String
  vacationStartDate: DateTime!
  vacationEndDate: DateTime
  description: String
  member: Member
  company: Company
  vacationCategory: VacationCategory
  organization: Organization
}

type Schedule {
  id: String
  startWorkTime: String!
  endWorkTime: String!
  memo: String!
  date: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
  member: Member!
  company: Company!
  organization: Organization!
  roleCategory: RoleCategory!
  scheduleTemplate: ScheduleTemplate!
  scheduleCategory: ScheduleCategory!
}

type WorkCheck {
  id: String!
  workDay: DateTime!
  workingTime: DateTime
  quittingTime: DateTime
  workCheckMemo: String
  createdAt: DateTime
  updatedAt: DateTime
  member: Member!
  company: Company!
  organization: Organization
  schedule: Schedule
  roleCategory: RoleCategory
}

type mainPageWorkCheckOutput {
  working: Int
  tardy: Int
  notWorking: Int
  vacation: Int
}

type WorkCheckOutput {
  id: String!
  workDay: DateTime!
  workingTime: DateTime
  quittingTime: DateTime
  workCheckMemo: String
  isComfirmed: Boolean!
  workingTimeRange: String
  endTimeRange: String
  createdAt: DateTime
  updatedAt: DateTime
  member: Member!
  company: Company!
  organization: Organization
  schedule: Schedule
  roleCategory: RoleCategory
}

type WorkCheckMemberOutput {
  member: Member!
  data: [[WorkCheck!]!]!
}

type VacationIssue {
  id: String!
  startingPoint: DateTime!
  expirationDate: DateTime!
  vacationAll: Int!
  useVacation: Float
  remaining: Float
  description: String!
  member: Member!
  company: Company
  organization: Organization!
}

type Holiday {
  id: String!
  dateName: String
  locdate: String
  year: String
  company: Company!
}

type File {
  id: String!
  url: String!
  name: String!
  createdAt: DateTime!
}

type NoticeBoard {
  id: String!
  preface: String!
  title: String!
  contents: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  account: Account!
  company: Company!
}

type Query {
  fetchAllNoticeBoards: [NoticeBoard!]!
  fetchOneNoticeBoard(noticeBoardId: String!): NoticeBoard!

  """Fetch RoleCategory"""
  fetchRoleCategory(roleCategoryId: String!): RoleCategory!

  """Fetch RoleCategorys"""
  fetchRoleCategories: [RoleCategory!]!

  """근무일정 템플릿 전체 조회"""
  fetchAllScheduleTemplates: [ScheduleTemplate!]!

  """근무일정 유형 전체 조회"""
  fetchAllScheduleCategories: [ScheduleCategory!]!

  """관리자 휴가 발생Id 조회"""
  fetchVacationIssue(vacationIssueId: String!): VacationIssue!

  """관리자 EndDate가 기준일자인 휴가발생 조회하기"""
  fetchVacationIssueBaseDate(baseDate: DateTime!, organizationId: [String!]!, startDate: DateTime, endDate: DateTime): [[VacationIssue!]!]!

  """관지라 EndDate가 기준일자이고, 퇴사자랑 같이 조회"""
  fetchVacationIssueWithBaseDateDelete(baseDate: DateTime!, organizationId: [String!]!, startDate: DateTime, endDate: DateTime): [[VacationIssue!]!]!

  """관리자 기준일자 기준으로 앞에 발생된 휴가 목록 조회"""
  fetchVacationIssueDetailDate(baseDate: DateTime!, organizationId: [String!]!, startDate: DateTime, endDate: DateTime): [[VacationIssue!]!]!

  """관리자 기준일자 기준으로 앞에 발생된 휴가 퇴사자랑 같이 조회"""
  fetchVacationIssueDetailDateDelete(baseDate: DateTime!, startDate: DateTime, endDate: DateTime, organizationId: [String!]!): [[VacationIssue!]!]!

  """member개인(나)의 출퇴근 기록 조회 - 직원모드"""
  fetchMemberWorkChecks(startDate: DateTime!, endDate: DateTime!): [WorkCheckOutput!]!

  """회사 지점에 속한 멤버들의 출퇴근 기록을 월별로 조회 - 달력형 - 관리자"""
  fetchMonthWorkChecks(organizationId: [String!]!, month: String!, isActiveMember: Boolean = false): [WorkCheckMemberOutput!]!

  """지정된 기간동안의 회사+지점에 속한 멤버들의 출퇴근 기록 조회 - 목록형 - 관리자"""
  fetchDateMemberWorkChecks(organizationId: [String!], startDate: DateTime!, endDate: DateTime!, isActiveMember: Boolean = false): [WorkCheckOutput!]!

  """현재 출퇴근 여부 확인"""
  checkWorkStatus: Boolean!

  """메인페이지 출근,지각,미출근,휴가 조회(카운트)"""
  fetchMainPageWorkCheck: [mainPageWorkCheckOutput!]!

  """회사 정보 조회"""
  fetchCompanyDetail: Company! @deprecated(reason: "Initializing Status / Need Update")

  """조직 리스트 조회"""
  fetchOrganizations: [Organization!]!

  """조직 상세 조회"""
  fetchOrganizationDetail(organizationId: String!): Organization!

  """comanyId에 해당하는 멤버 전체 조회, 비활성화버튼을 통해 비활성화 멤버 검색"""
  fetchMembers(isInActiveMember: Boolean = false): [Member!]!

  """회사내의 직원 수 카운트"""
  fetchNumberOfEmployees(isInActiveMember: Boolean = false): Int!

  """memberId(사원ID)로 개별 조회, memberId 입력시 입력한 member 조회, 아니면 로그인한 유저 정보 조회"""
  fetchMember(memberId: String): Member!

  """회사 내의 지점별 직원 조회"""
  fetchMemberInOrg(organizationId: String!): [Member!]!

  """회사 내의 직무별 직원 조회"""
  fetchMemberInRole(roleCategoryId: String!): [Member!]!

  """회사 내의 지점+직무 직원 조회"""
  fetchMemberInRoleOrg(organizationId: String!, roleCategoryId: String!): [Member!]!

  """(관리자) 휴가유형 전체 찾기"""
  fetchVacationCategories: [VacationCategory!]!

  """(관리자) 휴가유형ID를 적어서 하나의 유형 찾기"""
  fetchVacationCategory(vacationCategoryId: String!): VacationCategory!

  """(관리자) 휴가 ID를 통한 휴가 조회"""
  fetchVacation(vacationId: String!): Vacation!

  """(관리자) 활성직원 조회"""
  fetchVacationWithDate(startDate: DateTime, endDate: DateTime, organizationId: [String!]!): [[Vacation!]!]!

  """(관리자) 비활성화 된 직원 함께 조회"""
  fetchVacationWithDelete(startDate: DateTime, endDate: DateTime, organizationId: [String!]!): [[Vacation!]!]!
  fetchAccount: Account!

  """Fetch Accounts by company & role"""
  fetchAccounts: [Account!]!

  """멤버의 특정날짜 근무일정 조회"""
  fetchMemberSchedule(memberId: String!, date: DateTime!): Schedule

  """한달동안의 멤버들 근무일정 조회 - 직원용"""
  fetchMonthMemberSchedule(memberId: [String!]!): [[Schedule!]!]!

  """선택한 기간동안의 근무일정 조회 - 목록형 - 관리자"""
  fetchListTypeSchedule(startDate: DateTime!, endDate: DateTime!, organizationId: [String!]!): [Schedule!]!

  """Fetch Holiday such as companyAnniversary"""
  fetchHoliday: [Holiday!]!

  """Fetch Holidays in ASC order"""
  fetchHolidays: [Holiday!]!
  fetchGlobalConfig: GlobalConfig!

  """회사기준 근로정보 조회"""
  fetchWorkInfos: [WorkInfo!]!
}

type Mutation {
  createNoticeBoard(createNoticeBoardInput: CreateNoticeBoardInput!): NoticeBoard!
  updateNoticeBoard(noticeBoardId: String!, updateNoticeBoardInput: UpdateNoticeBoardInput!): NoticeBoard!
  deleteNoticeBoard(noticeBoardId: String!): Boolean!

  """Create RoleCategory"""
  createRoleCategory(createRoleCategoryInput: CreateRoleCategoryInput!): RoleCategory!

  """Update RoleCategory"""
  updateRoleCategory(roleCategoryId: String!, updateRoleCategoryInput: UpdateRoleCategoryInput!): RoleCategory!

  """Delte RoleCategory by useing roleCategoryId"""
  deleteRoleCategory(roleCategoryId: String!): Boolean!

  """근무일정 템플릿 생성"""
  createScheduleTemplate(createScheduleTemplateInput: CreateScheduleTemplateInput!): ScheduleTemplate!

  """근무일정 템플릿 수정"""
  updateScheduleTemplate(scheduleTemplateId: String!, updateScheduleTemplateInput: UpdateScheduleTemplatInput!): ScheduleTemplate!

  """근무일정 템플릿 단일 삭제"""
  deleteOneScheduleTemplate(scheduleTemplateId: String!): Boolean!

  """근무일정 템플릿 다수 삭제"""
  deleteManyScheduleTemplate(scheduleTemplateId: [String!]!): Boolean!

  """근무일정 유형 생성"""
  createScheduleCategory(createScheduleCategoryInput: CreateScheduleCategoryInput!): ScheduleCategory!

  """근무일정 유형 수정"""
  updateScheduleCategory(scheduleCategoryId: String!, updateScheduleCategoryInput: UpdateScheduleCategoryInput!): ScheduleCategory!

  """근무일정 유형 단일 삭제"""
  deleteOneScheduleCategory(scheduleCategoryId: String!): Boolean!

  """근무일정 유형 다수 삭제"""
  deleteManyScheduleCategory(scheduleCategoryId: [String!]!): Boolean!

  """초대코드 발송"""
  sendCodeToEmail(email: String!, memberId: String!): String!

  """초대코드 확인"""
  checkInvitationCode(memberId: String!, invitationCode: String!): String!

  """관리자 휴가 발생 만들기"""
  createVacationIssue(createVacationIssueInput: CreateVacationIssueInput!): VacationIssue!

  """관리자 휴가 발생 수정하기"""
  updateVacationIssue(vacationIssueId: String!, updateVacationIssueInput: UpdateVacationIssueInput!): VacationIssue!

  """관리자 휴가발생 다수 수정하기 """
  UpdateManyVacationsIssue(vacationIssueId: [String!]!, updateVacationIssueInput: UpdateVacationIssueInput): [VacationIssue!]!

  """관리자 휴가 발생 삭제하기"""
  deleteVacationIssue(vacationIssueId: String!): Boolean!

  """관리자 휴가발생 다수 삭제하기"""
  deleteManyVacationIssue(vacationIssueId: [String!]!): Boolean!
  login(email: String!, password: String!): String!
  restoreAccessToken: String!

  """Remove refreshtoken in headers"""
  logout: String!

  """관리자용 출퇴근기록 생성하기"""
  createAdminWorkCheck(createWorkCheckInput: CreateWorkCheckInput!): WorkCheck!

  """근무노트 생성"""
  createWorkCheckMemo(workCheckId: String!, workCheckMemo: String!): WorkCheck!

  """출근하기"""
  createStartWorkCheck: WorkCheck!

  """퇴근하기"""
  createEndWorkCheck(workCheckId: String!): WorkCheck!

  """출퇴근기록 단일 수정"""
  updateOneWorkCheck(workCheckId: String!, updateWorkCheckInput: UpdateWorkCheckInput!): WorkCheck!

  """출퇴근기록 다수 수정"""
  updateManyWorkCheck(workCheckId: [String!]!, updateWorkCheckInput: UpdateWorkCheckInput!): [WorkCheck!]!

  """출퇴근기록 단일 삭제"""
  deleteOneWorkCheck(workCheckId: String!): Boolean!

  """출근기록 다수 삭제"""
  deleteManyWorkCheck(workCheckId: [String!]!): Boolean!

  """회사 신규 가입"""
  createCompany(createCompanyInput: CreateCompanyInput!): Company! @deprecated(reason: "회원가입 시 자동으로 회사가 생성됩니다. 테스트용으로 수동생성시에만 사용하여 주세요")

  """회사 정보 수정"""
  updateCompany(updateCompanyInput: UpdateCompanyInput!): Company!

  """회사 정보 영구 삭제 / 복구 불가능하므로 사용 주의"""
  deleteCompany: Boolean!

  """조직 신규 생성"""
  createOrganization(createOrganizationInput: CreateOrganizationInput!): Organization!

  """조직 정보 수정"""
  updateOrganization(organizationId: String!, updateOrganizationInput: UpdateOrganizationInput!): Organization!

  """조직 정보 삭제"""
  deleteOrganization(organizationid: String!): Boolean!

  """멤버 정보 입력"""
  createMember(createMemberInput: CreateMemberInput!): Member!

  """멤버 정보 수정"""
  updateMember(memberId: String!, updateMemberInput: UpdateMemberInput!): Member!

  """멤버 정보 소프트 삭제"""
  softDeleteMember(memberId: String!): Boolean!

  """멤버 정보 완전 삭제"""
  deleteMember(memberId: String!): Boolean!

  """(관리자) 휴가유형 만들기"""
  createVacationCategory(createVacationCategoryInput: CreateVacationCategoryInput!): VacationCategory!

  """(관리자) 휴가유형Id와 Input을 적어 데이터 수정하기"""
  updateVacationCategory(vacationCategoryId: String!, updateVacationCategoryInput: UpdateVacationCategoryInput!): VacationCategory!

  """(관리자) 다수의 휴가유형 수정하기"""
  updateManyVacationCategories(vacationCategoryId: [String!]!, updateVacationCategoryInput: UpdateVacationCategoryInput): [VacationCategory!]!

  """(관리자) 휴가유형ID로 데이터 완전 삭제하기"""
  deleteVacationCategory(vacationCategoryId: String!): Boolean!

  """(관리자) 다수의 휴가유형 삭제하기"""
  deleteManyVacationCategories(vacationCategoryId: [String!]!): Boolean!

  """(관리자) 휴가관리 만들기"""
  createVacation(createVacationInput: CreateVacationInput!): [Vacation!]!

  """(관리자) 휴가 수정하기"""
  updateVacation(vacationId: String!, updateVacationInput: UpdateVacationInput!): Vacation!

  """(관리자) 다수의 휴가 수정하기"""
  updateManyVacation(vacationId: [String!]!, updateVacationInput: UpdateVacationInput): [Vacation!]!

  """(관리자) 휴가 삭제 - DB에는 유지"""
  softdeleteVacation(vacationId: String!): Boolean!

  """(관리자) 휴가 완전 삭제"""
  deleteVacation(vacationId: String!): Boolean!

  """(관리자) 휴가 완전 삭제"""
  deleteManyVacation(vacationId: [String!]!): Boolean!
  createAccount(email: String!, password: String!, name: String!, phone: String, createCompanyInput: CreateCompanyInput, invitationCode: String): Account!

  """근무일정 생성"""
  createSchedule(dates: [DateTime!]!, createScheduleInput: CreateScheduleInput!): [Schedule!]!

  """근무일정 단일 수정"""
  updateOneSchedule(scheduleId: String!, updateScheduleInput: UpdateScheduleInput!): Schedule!

  """scheduleId로 찾은 근무일정 다수 수정"""
  updateManySchedule(scheduleId: [String!]!, updateScheduleInput: UpdateScheduleInput!): [Schedule!]!

  """근무일정 단일 삭제"""
  deleteOneSchedule(scheduleId: String!): Boolean!

  """근무일정 다수 삭제"""
  deleteManySchedule(scheduleId: [String!]!): Boolean!

  """Create Holiday such as company founding anniversary"""
  createHoliday(createHolidayInput: CreateHolidayInput!): Holiday!

  """
  Create holidays such as "설날"
  """
  createHolidays: String!
  updateHoliday(holidayId: String!, updateHolidayInput: UpdateHolidayInput!): Holiday!
  createGlobalConfig(createGlobalConfigInput: CreateGlobalConfigInput): GlobalConfig!
  updateGlobalConfig(updateGlobalConfigInput: UpdateGlobalConfigInput!): GlobalConfig!

  """Upload a single file / Max file size apporximatly 10M"""
  uploadSingleFile(file: Upload!): File!

  """Upload multiple files / Max total size approximatly 10M"""
  uploadMultipleFiles(files: [Upload!]!): [File!]!

  """근로정보 만들기"""
  createWorkInfo(
    """근로정보 기본정보 입력"""
    createBasicWorkInfoInput: CreateBasicWorkInfoInput

    """근로정보 소정근로규칙 입력"""
    createFixedLaborDaysInput: CreateFixedLaborDaysInput

    """근로정보 최대근로규칙 입력"""
    createMaximumLaberInput: CreateMaximumLaberInput
  ): WorkInfo!

  """맴버에게 근로정보 부여"""
  insertWorkInfo(email: String!, name: String!): WorkInfo!

  """맴버 근로정보 수정"""
  updateWorkInfo(email: String, memberId: String!, updateBasicWorkInfoInput: UpdateBasicWorkInfoInput, updateFixedLaborDaysInput: UpdateFixedLaborDaysInput, updateMaximumLaberInput: UpdateMaximumLaberInput): WorkInfo!

  """회사 근로정보 삭제(완전삭제)"""
  deleteCompanyWorkInfo(workInfoId: String!): WorkInfo!
}

input CreateNoticeBoardInput {
  preface: String!
  title: String!
  contents: String!
}

input UpdateNoticeBoardInput {
  preface: String
  title: String
  contents: String
}

input CreateRoleCategoryInput {
  name: String!
  memo: String!
  colorCode: String!
}

input UpdateRoleCategoryInput {
  name: String
  memo: String
  colorCode: String
}

input CreateScheduleTemplateInput {
  name: String!
  startTime: String!
  endTime: String!
  colorCode: String!
  memo: String
  scheduleCategoryId: String
  organizationId: [String!]!
  roleCategoryId: [String!]!
}

input UpdateScheduleTemplatInput {
  name: String
  startTime: String
  endTime: String
  colorCode: String
  memo: String
  scheduleCategoryId: String
  organizationId: [String!]
  roleCategoryId: [String!]
}

input CreateScheduleCategoryInput {
  name: String!
  color: String!
  memo: String
  isOvertime: Boolean = false
  isNotHolidayWork: Boolean = false
}

input UpdateScheduleCategoryInput {
  name: String
  color: String
  memo: String
  isOvertime: Boolean = false
  isNotHolidayWork: Boolean = false
}

input CreateVacationIssueInput {
  memberId: String!
  vacationAll: Int!
  startingPoint: DateTime!
  expirationDate: DateTime!
  description: String!
}

input UpdateVacationIssueInput {
  memberId: String
  vacationAll: Int
  startingPoint: DateTime
  expirationDate: DateTime
  description: String
}

input CreateWorkCheckInput {
  workDay: DateTime!
  workingTime: String!
  quittingTime: String
  isWorking: Boolean = false
  workCheckMemo: String
  isComfirmed: Boolean = false
  memberId: String!
  scheduleId: String
  organizationId: String
  roleCategoryId: String
}

input UpdateWorkCheckInput {
  workDay: DateTime
  workingTime: String
  quittingTime: String
  isWorking: Boolean = false
  workCheckMemo: String
  isComfirmed: Boolean = false
  memberId: String
  scheduleId: String
  organizationId: String
  roleCategoryId: String
}

input CreateCompanyInput {
  name: String
  logoUrl: String
  rules: String
  membership: MEMBERSHIP_TYPE
  memberCount: Int
}

input UpdateCompanyInput {
  name: String
  logoUrl: String
  rules: String
  membership: MEMBERSHIP_TYPE
  memberCount: Int
}

input CreateOrganizationInput {
  name: String!
  checkPoint: String
  address: String!
  lat: String
  lng: String
  range: Int
  description: String
  color: String!
}

input UpdateOrganizationInput {
  name: String
  checkPoint: String
  address: String
  lat: String
  lng: String
  range: Int
  description: String
  color: String
}

input CreateMemberInput {
  name: String!
  joinDate: DateTime
  exitDate: DateTime
  memo: String
  organizationId: String
  roleCategoryId: String
}

input UpdateMemberInput {
  name: String
  joinDate: DateTime
  exitDate: DateTime
  memo: String
  organizationId: String
  roleCategoryId: String
}

input CreateVacationCategoryInput {
  name: String
  timeOption: String
  memo: String
  paidTime: Int
  deductionDays: Float
  organizationId: String
  roleCategoryId: String
}

input UpdateVacationCategoryInput {
  name: String
  timeOption: String
  memo: String
  paidTime: Int
  deductionDays: Float
  organizationId: String
  roleCategoryId: String
}

input CreateVacationInput {
  vacations: [DateTime!]!
  description: String
  vacationCategoryId: String!
  memberId: String!
}

input UpdateVacationInput {
  vacationStartDate: DateTime
  vacationEndDate: DateTime
  description: String
  vacationCategoryId: String
  memberId: String
}

input CreateScheduleInput {
  scheduleTemplateId: String!
  memberId: [String!]!
}

input UpdateScheduleInput {
  scheduleCategoryId: String
  organizationId: String
  roleCategoryId: String
  startWorkTime: String
  EndWorkTime: String
  memo: String
}

input CreateHolidayInput {
  dateName: String
  locdate: String
}

input UpdateHolidayInput {
  dateName: String
  locdate: String
}

input CreateGlobalConfigInput {
  allowedCheckInBefore: Int = 10
  allowedCheckInAfter: Int = 12
  isWorkLogEnabled: Boolean = false
  isVacationEnabled: Boolean = false
  isScheduleEnabled: Boolean = false
  isCheckInEnabled: Boolean = false
  isCheckOutEnabled: Boolean = false
}

input UpdateGlobalConfigInput {
  allowedCheckInBefore: Int = 10
  allowedCheckInAfter: Int = 12
  isWorkLogEnabled: Boolean = false
  isVacationEnabled: Boolean = false
  isScheduleEnabled: Boolean = false
  isCheckInEnabled: Boolean = false
  isCheckOutEnabled: Boolean = false
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input CreateBasicWorkInfoInput {
  name: String!
  fixedLabor: String
  weekOffDays: String
  memo: String
}

input CreateFixedLaborDaysInput {
  fixedStandard: Standard
  fixedHours: String
  fixedUnitPeriod: String
  fixedPeriodRange: PeriodRange
}

enum Standard {
  DAY
  WEEK
  MONTH
}

enum PeriodRange {
  DAY
  WEEK
  MONTH
}

input CreateMaximumLaberInput {
  maximumStandard: Standard
  maximumHours: String
  maximumUnitPeriod: String
  maximumPeriodRange: PeriodRange
}

input UpdateBasicWorkInfoInput {
  name: String
  fixedLabor: String
  weekOffDays: String
  memo: String
}

input UpdateFixedLaborDaysInput {
  fixedStandard: Standard
  fixedHours: String
  fixedUnitPeriod: String
  fixedPeriodRange: PeriodRange
}

input UpdateMaximumLaberInput {
  maximumStandard: Standard
  maximumHours: String
  maximumUnitPeriod: String
  maximumPeriodRange: PeriodRange
}